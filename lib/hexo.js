// Generated by CoffeeScript 1.7.1
(function() {
  var ConsoleView, PostCreateView;

  PostCreateView = require('./post-create-view');

  ConsoleView = require('./console-view');

  module.exports = {
    activate: function(_arg) {
      var _ref;
      _ref = _arg != null ? _arg : {}, this.postCreateViewState = _ref.postCreateViewState, this.consoleViewState = _ref.consoleViewState;
      atom.workspaceView.command('atom-hexo:new-post', (function(_this) {
        return function() {
          return _this.createPostCreateView();
        };
      })(this));
      atom.workspaceView.command('atom-hexo:new-page', (function(_this) {
        return function() {
          return _this.createPostCreateView('page');
        };
      })(this));
      atom.workspaceView.command('atom-hexo:new-draft', (function(_this) {
        return function() {
          return _this.createPostCreateView('draft');
        };
      })(this));
      return atom.workspaceView.command('atom-hexo:generate', (function(_this) {
        return function() {
          return _this.executeConsoleCommand('generate');
        };
      })(this));
    },
    createPostCreateView: function(layout) {
      if (layout == null) {
        layout = 'post';
      }
      if (!this.postCreateView) {
        this.postCreateView = new PostCreateView({
          serializeState: this.postCreateViewState,
          layout: layout
        });
      } else {
        this.postCreateView.setPostLayout(layout);
      }
      return this.postCreateView.showPostCreateEditor();
    },
    executeConsoleCommand: function(command) {
      if (!this.consoleView) {
        this.consoleView = new ConsoleView(this.consoleViewState);
      }
      if ((this.consoleView.bufferedProcess != null) && (this.consoleView.bufferedProcess.process != null)) {
        return this.consoleView.display('warning', 'Other commands are being executed!');
      } else {
        switch (command) {
          case 'generate':
            return this.consoleView.generate();
        }
      }
    },
    deactivate: function() {
      var _ref;
      return (_ref = this.postCreateView) != null ? _ref.destroy() : void 0;
    },
    serialize: function() {
      var _ref, _ref1, _ref2, _ref3;
      return {
        postCreateViewState: (_ref = (_ref1 = this.postCreateView) != null ? _ref1.serialize() : void 0) != null ? _ref : this.postCreateViewState,
        consoleViewState: (_ref2 = (_ref3 = this.consoleView) != null ? _ref3.serialize() : void 0) != null ? _ref2 : this.consoleViewState
      };
    }
  };

}).call(this);
